#!/usr/bin/env python

import os
import sys
import re
import json

Version = [0, 9]
Prefix_Str = '''
########################################################################
#
# Automatically generated by crmake %d.%d
#
########################################################################
'''

HList = []
CList = []
CPPList = []

Targets = {}

Makefiles = {}

Exclude = []

Protect = ['proto', 'hList', 'cppList', 'cList', 'apply_state']

class Makefile:
    def __init__(self, setting={}):
        self.proto = {}
        self.apply_state = 0
        self.type = 'pro'

        self.name = 'main' #the name of this object, e.g foo
        self.target = '' #target'filename needn't be the same with name
        self.makefile = 'Makefile' #pathname of Makefile

        self.srcdir = '.' #the directory or file including the target's source
        self.tgtdir = 'bin' #path for the target
        self.objdir = 'obj' #path for intermedia files like *.o

        self.hList = []
        self.cppList = []
        self.cList = []

        self.includePath = [] #-I
        self.libPath = [] #-L
        self.libName = [] #-l
        self.module = [] #pkg-config

        self.CC = 'gcc'
        self.CPP = 'g++'
        self.LD = 'g++'
        self.AR = 'ar'
        self.INSTALL = 'install'
        self.SYMLINK = 'ln -s'
        self.MKDIRS = 'mkdir -p'
        self.CFLAGS = '-fPIC'
        self.CPPFLAGS = '-fPIC'
        self.SHAREDFLAGS = '-shared'
        self.LDFLAGS = '-fPIC'
        self.DBGFLAGS = '-g'
        self.OPTFLAGS = '-O2'
        self.DEST = '/'
        self.PREFIX = '/usr'
        self.BINDIR = '/bin'
        self.LIBDIR = '/lib'

        self.subtgt = [] #list of names of Makefiles this target depends on
        self.tar = True
        self.opendir = True
        self.debug = True
        self.install = True

        if setting != {}:
            self.add_conf(setting)

    def add_conf(self, setting):
        if type(setting) != type({}):
            return
        if 'inh' in setting and type(setting['inh']) == str:
            self.inh = setting['inh']
        for key in setting:
            if hasattr(self, key) and not (key in Protect) and \
                    type(getattr(self, key)) == type(setting[key]):
                self.proto[key] = setting[key]
        self.apply_state = 0

    def check_add(self):
        self.setdefault('srcdir', '.')
        self.setdefault('name', os.path.basename(os.path.abspath(self.srcdir)))
        self.setdefault('target', self.name)
        self.setdefault('makefile', 'Makefile')
        self.setdefault('tgtdir', 'bin')
        self.setdefault('objdir', 'obj')

        self.setdefault('CC', 'gcc')
        self.setdefault('CPP', 'g++')
        self.setdefault('LD', 'g++')
        self.setdefault('AR', 'ar')
        self.setdefault('MKDIRS', 'mkdir -p')
        self.setdefault('INSTALL', 'install')
        self.setdefault('SYMLINK', 'ln -s')

        self.setdefault('DEST', '/')
        self.setdefault('PREFIX', '/usr')
        self.setdefault('BINDIR', '/bin')
        self.setdefault('LIBDIR', '/lib')

    def setdefault(self, attr, default):
        if hasattr(self, attr) \
                and getattr(self, attr) != [] and getattr(self, attr) != '':
            return
        setattr(self, attr, default)

    def apply_conf(self):
        if self.apply_state:
            return
        self.apply_state = -1
        if hasattr(self, 'inh'):
            if self.inh in Makefiles:
                if Makefiles[self.inh].state == -1:
                    os.exit(-1)
                Makefiles[self.inh].apply_conf()
                inh = Makefiles[self.inh].proto
                for key in inh:
                    if not key in self.proto:
                        self.proto[key] = inh[key]
        for key in self.proto:
            setattr(self, key, self.proto[key])
        self.apply_state = 1

    def write(self):
        pid = os.fork()
        if pid == -1:
            exit(-1)
        if pid:
            os.waitpid(pid, 0)
            return
        f = open(self.makefile, 'w')
        os.chdir(os.path.dirname(self.makefile))
        f.write(Prefix_Str % Version[0], Version[1])
        for key in ['CC', 'CPP', 'LD', 'AR', 'SHAREDFLAGS', 'MKDIRS', 'INSTALL', 'SYMLINK', 'CFLAGS', 'CPPFLAGS', 'LDFLAGS', 'DBGFLAGS', 'OPTFLAGS', 'DEST', 'PREFIX', 'BINDIR', 'LIBDIR', 'name', 'target', 'srcdir', 'tgtdir', 'objdir']:
            f.write(key + ' = ' + getattr(self, key) + '\n')
        if self.type == 'pro':
            self.write_pro(f)
        f.close()

    def write_pro(self, f):
        f.write('all: $(tgtdir)/$(target)\n')
        f.write('.PHONY: all\n')
        self.o_list()

    def o_list(self):
        self.oList = []
        for c in self.cList:
            o = {}

def simpath(path):
    dirlist = path.split('/')
    newlist = []
    for i in range(0, len(dirlist)):
        if len(newlist) == 0:
            newlist.append(dirlist[i])
            continue
        if dirlist[i] == '.' or dirlist[i] == '':
            continue
        if dirlist[i] == '..' and len(newlist) != 0 and \
                newlist[-1] != '.' and newlist[-1] != '..':
            if newlist[-1] == '':
                continue
            newlist.pop()
            if len(newlist) == 0:
                newlist = ['.']
            continue
        newlist.append(dirlist[i])
    if newlist[0] != '.' and newlist[0] != '':
        newlist.insert(0, '.')
    res = ''
    for i in range(0, len(newlist)):
        if i != 0 or (newlist[0] == '' and i + 1 == len(newlist)):
            res += '/'
        res += newlist[i]
    return res

def getrel(path, sub):
    path = simpath(path)
    sub = simpath(sub)
    if sub == path:
        return ''
    if path[-1] != '/':
        path += '/'
    if sub.find(path) != 0:
        return
    rel = sub[len(path):len(sub)]
    if rel[0] == '/':
        rel = rel[1:len(sub)]
    return rel

def find(path):
    try:
        children = os.listdir(path)
    except OSError:
        return []
    res = []
    for child in children:
        full = path + '/' + child
        res.append(full)
        if os.path.isdir(full) & (not os.path.islink(full)):
            res += find(full)
    return res

def rd_config():
    try:
        conf_txt = open('crmake.in').read()
    except IOError:
        return
    try:
        conf = json.loads(conf_txt)
    except ValueError:
        return
    if 'targets' in conf and type(conf['targets']) == list:
        Targets = conf['targets']
        conf.pop('targets')
        if 'main' in Targets:
            Targets.pop('main')
        for target in Targets:
            Targets[target]['name'] = target
    return conf


def rd_arg():
    i = 0
    ret = {}
    while (i < len(sys.argv)):
        if sys.argv[i] == '-I':
            i += 1;
            ret['includePath'].append(sys.argv[i])
        elif sys.argv[i] == '-L':
            i += 1;
            ret['libPath'].append(sys.argv[i])
        elif sys.argv[i] == '-l':
            i += 1;
            ret['libName'].append(sys.argv[i])
        elif '=' in sys.argv[i]:
            [key, value] = sys.argv[i].split('=', 1)
            ret[key] = value
        elif sys.argv[i] == '-o':
            i += 1
            ret['makefile'] = sys.argv[i]
        elif sys.argv[i] == '--notar':
            ret['tar'] = False
        elif sys.argv[i] == '--noopen':
            ret['opendir'] = False
        elif sys.argv[i] == '--nodebug':
            ret['debug'] = False
        elif sys.argv[i] == '--noinstall':
            ret['install'] = False
        i += 1
    return ret


def lssrc(path):
    flist = find(path)
    for f in flist:
        if re.compile('[^\./]\.c$').findall(f) != []:
            CList.append(f)
        elif re.compile('[^\./]\.cpp$').findall(f) != []:
            CPPList.append(f)
        elif re.compile('[^\./]\.h$').findall(f) != []:
            HList.append(f)

def dist_files(List, field):
    for src in List:
        parent = Makefiles['main']
        for name in Makefiles:
            make = Makefiles[name]
            rel = getrel(make.srcdir, src)
            if rel == None or \
                    getrel(make.srcdir, parent.srcdir) != None:
                continue
            parent = make
        getattr(parent, field).append(src)

def dist_list():
    dist_files(CList, 'cList')
    dist_files(CPPList, 'cppList')
    dist_files(HList, 'hList')

def main():
    conf_f = rd_config()
    cli_arg = rd_arg()
    mt = Makefile()
    mt.add_conf(conf_f)
    mt.add_conf(cli_arg)
    mt.apply_conf()
    mt.check_add()
    lssrc(mt.srcdir)
    Makefiles['main'] = mt
    for target in Targets:
        Makefiles[target] = Makefile(setting=Targets[target])
        Makefiles[target].apply_conf()
        Makefiles[target].check_add()
    dist_list()

if __name__ == '__main__':
    main();

